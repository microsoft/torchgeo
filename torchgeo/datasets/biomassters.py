# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

"""BioMassters Dataset."""

import os
from typing import Any, Optional

import matplotlib.pyplot as plt
import numpy as np
import rasterio
import torch
from matplotlib.figure import Figure
from torch import Tensor

from .geo import NonGeoDataset
from .utils import download_url, extract_archive, percentile_normalization


class BioMassters(NonGeoDataset):
    """BioMassters Dataset for Aboveground Biomass prediction.

    Dataset intented for Aboveground Biomass (AGB) prediction
    over Finnish forests based on Sentinel 1 and 2 data with
    corresponding target AGB mask values generated by Light Detection
    and Ranging (LiDAR).

    Dataset Format:

    * .tif files for Sentinel 1 and 2 data
    * .tif file for pixel wise AGB target mask
    * .csv files for metadata regarding features and targets

    Dataset Features:

    * 13,000 target AGB masks of size (256x256px)
    * 12 months of data per target mask
    * Sentinel 1 and Sentinel 2 data for each location
    * Sentinel 1 (specify channels here) available for each month
    * Sentinel 2 (B02, B03, B04, B05, B06, B07, B08, B8A, B11, B12)
      not available for each month due to ESA aquisition halt over the region
      during particular periods

    If you use this dataset in your research, please cite the following paper:

    * TBD

    .. versionadded:: 0.5
    """

    valid_splits = ["train", "test"]
    valid_sensors = ["S1", "S2"]

    url = "https://huggingface.co/datasets/nascetti-a/BioMassters/resolve/main/{}"

    md5s = {"train_features": "123", "test_features": "456", "train_agbm": "789"}

    metadata_filename = "The_BioMassters_-_features_metadata.csv.csv"

    def __init__(
        self,
        root: str,
        split: str = "train",
        sensors: list[str] = ["S1", "S2"],
        as_time_series: bool = False,
        download: bool = False,
        checksum: bool = False,
    ) -> None:
        """Initialize a new instance of BioMassters dataset.

        Args:
            root: root directory where dataset can be found
            split: train or test split
            sensors: which sensors to consider for the sample
            as_time_series: whether or not to return all available
                time-steps or just a single one for a given target location
            download: if True, download dataset and store it in the root directory
            checksum: if True, check the MD5 of the downloaded files (may be slow)

        RuntimeError:
            AssertionError: if ``split`` or ``sensors`` is invalid
            ImportError: if pandas is not installed
            RuntimeError: if ``download=False`` but dataset is missing or checksum fails
        """
        self.root = root

        assert (
            split in self.valid_splits
        ), f"Please choose one of the valid splits {self.valid_splits}."
        self.split = split

        assert set(sensors).issubset(
            set(self.valid_sensors)
        ), f"Please choose a subset of valid sensors {self.valid_sensors}."
        self.sensors = sensors
        self.as_time_series = as_time_series
        self.download = download
        self.checksum = checksum

        try:
            import pandas as pd  # noqa: F401
        except ImportError:
            raise ImportError(
                "pandas is not installed and is required to use this dataset"
            )

        self._verify()

        # open metadata csv files
        self.df = pd.read_csv(os.path.join(self.root, self.metadata_filename))

        # filter sensors
        self.df = self.df[self.df["satellite"].isin(self.sensors)]

        # filter split
        self.df = self.df[self.df["split"] == self.split]

        # generate numerical month from filename since first month is September
        # and has numerical index of 0
        self.df["num_month"] = (
            self.df["filename"]
            .str.split("_", expand=True)[2]
            .str.split(".", expand=True)[0]
            .astype(int)
        )

        # set dataframe index depending on the task for easier indexing
        if self.as_time_series:
            self.df["num_index"] = self.df.groupby(["chip_id"]).ngroup()
        else:
            filter_df = (
                self.df.groupby(["chip_id", "month"])["satellite"].count().reset_index()
            )
            filter_df = filter_df[filter_df["satellite"] == len(self.sensors)].drop(
                "satellite", axis=1
            )
            # guarantee that each sample has corresponding number of images available
            self.df = self.df.merge(filter_df, on=["chip_id", "month"], how="inner")

            self.df["num_index"] = self.df.groupby(["chip_id", "month"]).ngroup()

    def __getitem__(self, index: int) -> dict[str, Any]:
        """Return an index within the dataset.

        Args:
            index: index to return

        Returns:
            data and labels at that index

        Raises:
            IndexError: if index is out of range of the dataset
        """
        sample_df = self.df[self.df["num_index"] == index].copy()

        # sort by satellite and month to return correct order
        sample_df.sort_values(
            by=["satellite", "num_month"], inplace=True, ascending=True
        )

        filepaths = sample_df["filename"].tolist()
        sample: dict[str, Tensor] = {}
        for sens in self.sensors:
            sens_filepaths = [fp for fp in filepaths if sens in fp]
            sample[f"image_{sens}"] = self._load_input(sens_filepaths)

        if self.split == "train":
            sample["target"] = self._load_target(
                sample_df["corresponding_agbm"].unique()[0]
            )

        return sample

    def __len__(self) -> int:
        """Return the length of the dataset.

        Returns:
            length of the dataset
        """
        return len(self.df["num_index"].unique())

    def _load_input(self, filenames: list[str]) -> Tensor:
        """Load the input imagery at the index.

        Args:
            filenames: list of filenames corresponding to input
        """
        filepaths = [
            os.path.join(self.root, f"{self.split}_features", f) for f in filenames
        ]
        if not self.as_time_series:
            arr = np.concatenate([rasterio.open(fp).read() for fp in filepaths], axis=0)
        else:
            arr = np.stack([rasterio.open(fp).read() for fp in filepaths], axis=0)
        return torch.tensor(arr.astype(np.int32))

    def _load_target(self, filename: str) -> Tensor:
        """Load the target mask at the index.

        Args:
            filename: filename of target to index

        Returns:
            target mask
        """
        with rasterio.open(os.path.join(self.root, "train_agbm", filename), "r") as src:
            arr: "np.typing.NDArray[np.float_]" = src.read()

        target = torch.from_numpy(arr).float()
        return target

    def _verify(self) -> None:
        """Verify the integrity of the dataset.

        Raises:
            RuntimeError: if ``download=False`` but dataset is missing or checksum fails
        """
        # Check if the extracted files already exist
        exists = []

        filenames = [f"{self.split}_features", self.metadata_filename]
        for filename in filenames:
            pathname = os.path.join(self.root, filename)
            exists.append(os.path.exists(pathname))
        if all(exists):
            return

        # Check if the zip files have already been downloaded
        pathname = os.path.join(self.root, f"{self.split}_features") + ".zip"
        if os.path.exists(pathname):
            self._extract()
            return

        # Check if the user requested to download the dataset
        if not self.download:
            raise RuntimeError(
                f"Dataset not found in `root={self.root}` and `download=False`, "
                "either specify a different `root` directory or use `download=True` "
                "to automatically download the dataset."
            )

        # Download the dataset
        self._download()
        self._extract()

    def _download(self) -> None:
        """Download the dataset and extract it.

        Raises:
            RuntimeError: if download doesn't work correctly or checksums don't match
        """
        # download features
        download_url(
            self.url.format(f"{self.split}_features.zip"),
            self.root,
            md5=self.md5s[f"{self.split}_features"] if self.checksum else None,
        )
        # download targets
        if self.split == "train":
            download_url(
                self.url.format("train_agbm.zip"),
                self.root,
                md5=self.md5s["train_agbm"] if self.checksum else None,
            )
        # download metadata
        download_url(self.url.format(self.metadata_filename), self.root)

    def _extract(self) -> None:
        """Extract the dataset."""
        # extract imagery
        extract_archive(os.path.join(self.root, f"{self.split}_features.zip"))
        if self.split == "train":
            extract_archive(os.path.join(self.root, "train_agbm.zip"))

    def plot(
        self,
        sample: dict[str, Any],
        show_titles: bool = True,
        suptitle: Optional[str] = None,
    ) -> Figure:
        """Plot a sample from the dataset.

        Args:
            sample: a sample return by :meth:`__getitem__`
            show_titles: flag indicating whether to show titles above each panel
            suptitle: optional suptitle to use for figure

        Returns:
            a matplotlib Figure with the rendered sample
        """
        ncols = len(self.sensors) + 1

        showing_predictions = "prediction" in sample
        if showing_predictions:
            ncols += 1

        fig, axs = plt.subplots(1, ncols=ncols, figsize=(5 * ncols, 10))
        for idx, sens in enumerate(self.sensors):
            img = sample[f"image_{sens}"].numpy()
            if self.as_time_series:
                # plot last time step
                img = img[-1, ...]
            if sens == "S2":
                img = img[[2, 1, 0], ...]
                img = percentile_normalization(img.transpose(1, 2, 0))
            else:
                co_polarization = img[0]  # transmit == receive
                cross_polarization = img[1]  # transmit != receive
                ratio = co_polarization / cross_polarization

                # https://gis.stackexchange.com/a/400780/123758
                co_polarization = np.clip(co_polarization / 0.3, a_min=0, a_max=1)
                cross_polarization = np.clip(
                    cross_polarization / 0.05, a_min=0, a_max=1
                )
                ratio = np.clip(ratio / 25, a_min=0, a_max=1)

                img = np.stack((co_polarization, cross_polarization, ratio), axis=-1)

            axs[idx].imshow(img)
            axs[idx].axis("off")
            if show_titles:
                axs[idx].set_title(sens)

        if showing_predictions:
            pred = axs[ncols - 2].imshow(
                sample["prediction"].permute(1, 2, 0), cmap="YlGn"
            )
            plt.colorbar(pred, ax=axs[ncols - 2], fraction=0.046, pad=0.04)
            axs[ncols - 2].axis("off")
            if show_titles:
                axs[ncols - 2].set_title("Prediction")

        # plot target
        target = axs[-1].imshow(sample["target"].permute(1, 2, 0), cmap="YlGn")
        plt.colorbar(target, ax=axs[-1], fraction=0.046, pad=0.04)
        axs[-1].axis("Off")
        if show_titles:
            axs[-1].set_title("Target")

        if suptitle is not None:
            plt.suptitle(suptitle)

        return fig
