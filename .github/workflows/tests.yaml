name: tests
on:
  push:
    branches:
    - main
    - release**
  pull_request:
    branches:
    - main
    - release**
jobs:
  mypy:
    name: mypy
    runs-on: ubuntu-latest
    steps:
    - name: Clone repo
      uses: actions/checkout@v3.3.0
    - name: Set up python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v3.3.1
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements/required.txt') }}-${{ hashFiles('requirements/datasets.txt') }}-${{ hashFiles('requirements/tests.txt') }}
    - name: Install pip dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install -r requirements/required.txt -r requirements/datasets.txt -r requirements/tests.txt
        pip list
    - name: Run mypy checks
      run: mypy .
  pytest:
    name: pytest
    runs-on: ${{ matrix.os }}
    env:
      MPLBACKEND: Agg
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - name: Clone repo
      uses: actions/checkout@v3.3.0
    - name: Set up python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache dependencies
      uses: actions/cache@v3.3.1
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements/required.txt') }}-${{ hashFiles('requirements/datasets.txt') }}-${{ hashFiles('requirements/tests.txt') }}
    - name: Setup headless display for pyvista
      uses: pyvista/setup-headless-display-action@v1
    - name: Install apt dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install unrar
      if: ${{ runner.os == 'Linux' }}
    - name: Install brew dependencies (macOS)
      run: brew install rar
      if: ${{ runner.os == 'macOS' }}
    - name: Install pacman dependencies (Windows)
      shell: cmd
      run: |
        set "PATH=%PATH%;c:\msys64\usr\bin"
        pacman -S --noconfirm --needed unrar
      if: ${{ runner.os == 'Windows' }}
    - name: Install pip dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install -r requirements/required.txt -r requirements/datasets.txt -r requirements/tests.txt
        pip list
    - name: Run pytest checks (Linux/macOS)
      run: pytest --cov=torchgeo --cov-report=xml --durations=10
      if: ${{ runner.os != 'Windows' }}
    - name: Run pytest checks (Windows)
      shell: cmd
      run: |
        set "PATH=%PATH%;c:\msys64\usr\bin"
        pytest --cov=torchgeo --cov-report=xml --durations=10
      if: ${{ runner.os == 'Windows' }}
    - name: Report coverage
      uses: codecov/codecov-action@v3.1.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  minimum:
    name: minimum
    runs-on: ubuntu-latest
    env:
      MPLBACKEND: Agg
    steps:
    - name: Clone repo
      uses: actions/checkout@v3.3.0
    - name: Set up python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: '3.8'
    - name: Cache dependencies
      uses: actions/cache@v3.3.1
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements/min-reqs.old') }}-${{ hashFiles('requirements/mins-cons.old') }}
    - name: Install apt dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install unrar
    - name: Install pip dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install -r requirements/min-reqs.old -c requirements/min-cons.old
        pip list
    - name: Run pytest checks
      run: pytest --cov=torchgeo --cov-report=xml --durations=10
    - name: Report coverage
      uses: codecov/codecov-action@v3.1.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
